---
layout: post
title:  "Builder"
date:   2013-09-23 13:06:49
categories: Builder method
---

The __Director__ is reusable: we can use the smae _process_ to create different repsesntiaons.

the __CBuilder__ is reusable: it encapsulates knowledge about how to assemeble a particular __Product__ _representation_

This scheme provides a _strong encapsulation boundary:_ the repesntation is decoupled from the constrcution process.

The __Builder__ pattern provides fine-grained control over _how_ an object(-structure) is assembled/configured.

all the other GoF _Creational Patterns_ allow on to requiest only a praticular __Product__ type- the don't allow one to get involved with the 
assembly/configuration process.

Note: this is _not_ to say that the implementor of one of those other patterns cnnot specify how an object(-stucture) is created, because they most cetrainly can - e.g.   

```java
Foo makeFoo() {
    Foo f = new DaveCoFoo();
    f.addBell( new LargeClangyBell() );
    f.addWhilstle( new ShrillAnnoyingWhistle() );
    return f; // retuns a Foo configure with Bells & Whistles
}
```

- but how this differs s that when `makeFoo()` is called, one _always_ gets a `DaveCoFoo`
configured with a ` LargeClangyBell() ` and ` ShrillAnnoyingWhistle() ` 
clients of this method weren't given the opportunity to:  
* to customize the accessories 
* to change the representation
